plugins {
    id 'jacoco'
    id 'org.sonarqube' version '3.5.0.2730'
}

sourceCompatibility = 1.7
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sonarqube {
    properties {
        property "sonar.projectKey", "SE2GroupAlphaGameOfLife_GameOfLife"
        property "sonar.organization", "se2groupalphagameoflife"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.projectDir}/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
    }
}

dependencies {
    implementation 'junit:junit:4.13.2'
    implementation 'com.badlogicgames.gdx:gdx-backend-android:1.11.0'

    implementation 'com.esotericsoftware:kryonet:2.22.0-RC1'
    implementation 'com.esotericsoftware.kryo:kryo:2.24.0'

    testImplementation 'junit:junit:4.13.2'
}

sourceSets.main.java.srcDirs = [ "src/main" ]
sourceSets.test.java.srcDirs = [ "src/test" ]

eclipse.project.name = appName + "-core"

task _jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {

    reports {
        xml.enabled true
        xml.destination file("${project.projectDir}/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml")
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}

test {
    useJUnitPlatform()
    finalizedBy(_jacocoTestReport)
}